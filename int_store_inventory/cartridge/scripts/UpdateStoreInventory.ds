/**
* Script file for use in the Script pipelet node.
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*  @input order : dw.order.Order This is a sample comment.
*  
*
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );
importPackage( dw.web );
importPackage( dw.catalog );
importPackage( dw.io);
importPackage( dw.net );
importPackage( dw.object);

function execute( pdict : PipelineDictionary ) : Number
{
	var updateInventory= dw.system.Site.getCurrent().getCustomPreferenceValue('updateInventory');
	var out = response.writer;
	try{
	var sliArray : Array = new Array();
	for(var i =0 ; i< pdict.order.allProductLineItems.length ; i++){
		 var data : Object = {
			'storeId': pdict.order.allProductLineItems[i].custom.StoreId,
			'productId': pdict.order.allProductLineItems[i].productID,
			'storeInventory': pdict.order.allProductLineItems[i].custom.StoreInventory,
			'quantity': pdict.order.allProductLineItems[i].quantityValue		
		};
	sliArray.push(data);
	}
	var json = JSON.stringify(sliArray);
	try{
   var httpClient : HTTPClient = new HTTPClient();
  httpClient.setTimeout('10000');
   httpClient.open("POST" , updateInventory);
    httpClient.setRequestHeader("Content-Type", "application/json");
    httpClient.send(json);
   return PIPELET_NEXT;
   } 
catch(e){
	var e1 = e;
	   return e1;
}
} catch(e){
return e;
}
}
